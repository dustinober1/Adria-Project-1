# Admin Backend - Quick Reference Card

## 🎯 Quick Start (5 Minutes)

```bash
# 1. Set up database
npm run db:setup

# 2. Register at http://localhost:3000/register.html
# 3. Make yourself admin
psql -U postgres -d adria_style_studio
UPDATE users SET is_admin = true WHERE email = 'your@email.com';

# 4. Start server
npm start

# 5. Go to http://localhost:3000/admin.html
```

---

## 📍 URLs

| Page | URL | Purpose |
|------|-----|---------|
| Admin Dashboard | `/admin.html` | Manage users & articles |
| Public Blog | `/blog.html` | View published articles |
| Register | `/register.html` | Create new account |
| Login | `/login.html` | Sign in |

---

## 🔌 API Endpoints

### Dashboard (Protected)
```
GET /api/admin/stats
```

### Users (Protected)
```
GET    /api/admin/users           # List all users
GET    /api/admin/users/:id       # User details
DELETE /api/admin/users/:id       # Delete user
POST   /api/admin/users/:id/promote   # Make admin
POST   /api/admin/users/:id/demote    # Remove admin
```

### Articles (Protected)
```
GET    /api/admin/articles        # List all articles
POST   /api/admin/articles        # Create article
GET    /api/admin/articles/:id    # Article details
PUT    /api/admin/articles/:id    # Update article
DELETE /api/admin/articles/:id    # Delete article
```

### Public Blog (NO authentication)
```
GET  /api/blog              # Get published articles
GET  /api/blog/:slug        # Get article by slug
```

---

## 🗂️ Project Structure

```
server/
├── models/
│   ├── Admin.js           (NEW) Admin operations
│   ├── BlogArticle.js     (NEW) Article model
│   └── User.js            (UPDATED)
├── controllers/
│   ├── adminController.js (NEW)
│   └── blogController.js  (NEW)
├── routes/
│   ├── admin.js           (NEW)
│   └── blog.js            (NEW)
├── middleware/
│   └── auth.js            (UPDATED)
└── database/
    └── setup.js           (UPDATED)

admin.html               (NEW) Dashboard
css/admin.css           (NEW) Styling
js/admin.js             (NEW) Logic
```

---

## 📊 Database Tables

### users
```
id, email, password_hash, first_name, last_name, 
is_admin, created_at, updated_at, last_login
```

### blog_articles
```
id, title, slug, content, excerpt, featured_image,
author_id, published, created_at, updated_at
```

---

## 🔒 Security

- ✅ JWT authentication
- ✅ Admin role check
- ✅ Password hashing
- ✅ SQL injection prevention
- ✅ Input validation
- ✅ HTTP-only cookies

---

## 📱 Dashboard Features

| Tab | Features |
|-----|----------|
| **Dashboard** | View statistics |
| **Users** | List, search, promote, demote, delete |
| **Articles** | List, filter, search |
| **New Article** | Create, publish |

---

## 📝 Create Article Example

```json
{
  "title": "My First Article",
  "slug": "my-first-article",
  "content": "Article body here...",
  "excerpt": "Brief summary...",
  "featured_image": "https://example.com/image.jpg",
  "published": true
}
```

---

## 🧪 Testing Checklist

- [ ] Database setup succeeds
- [ ] Can register account
- [ ] Can make account admin
- [ ] Can login
- [ ] Can access `/admin.html`
- [ ] Dashboard shows statistics
- [ ] Can view users list
- [ ] Can create article
- [ ] Article appears in list
- [ ] Can edit article
- [ ] Can delete article
- [ ] Public API works

---

## ⚙️ Environment Variables

```
DB_HOST=localhost
DB_PORT=5432
DB_NAME=adria_style_studio
DB_USER=postgres
DB_PASSWORD=your_password
JWT_SECRET=your_secret_key
JWT_EXPIRE=7d
NODE_ENV=development
FRONTEND_URL=http://localhost:3000
```

---

## 🎨 UI Features

- ✅ Responsive (desktop, tablet, mobile)
- ✅ Sidebar navigation
- ✅ Search & filter
- ✅ Modal dialogs
- ✅ Toast notifications
- ✅ Form validation
- ✅ Loading states
- ✅ Auto-generate slugs

---

## 📚 Documentation

| File | Purpose |
|------|---------|
| `ADMIN_SETUP.md` | Setup & troubleshooting |
| `ADMIN_GUIDE_COMPLETE.md` | Full feature guide |
| `ADMIN_BACKEND_SUMMARY.md` | Technical details |
| `FILE_STRUCTURE_OVERVIEW.md` | Project structure |
| `ARCHITECTURE_OVERVIEW.txt` | System architecture |
| `QUICK_START_ADMIN.sh` | Quick reference |

---

## 🚀 Common Tasks

### Make User Admin
```bash
psql -U postgres -d adria_style_studio
UPDATE users SET is_admin = true WHERE email = 'email@example.com';
```

### Create Article via API
```bash
curl -X POST http://localhost:3000/api/admin/articles \
  -H "Content-Type: application/json" \
  -H "Cookie: token=YOUR_JWT_TOKEN" \
  -d '{
    "title": "My Article",
    "slug": "my-article",
    "content": "Content here",
    "excerpt": "Summary",
    "published": true
  }'
```

### Get Published Articles
```bash
curl http://localhost:3000/api/blog
```

### Restart After Changes
```bash
npm run dev    # With nodemon (auto-restart)
# or
npm start      # Manual
```

---

## 🐛 Troubleshooting

### Admin page shows "not authorized"
```bash
# Check if user is admin
psql -U postgres -d adria_style_studio
SELECT email, is_admin FROM users;

# If not, make admin
UPDATE users SET is_admin = true WHERE email = 'your@email.com';
```

### Database connection error
```bash
# Check PostgreSQL is running
psql -U postgres -d postgres

# Check database exists
\l | grep adria_style_studio

# Re-run setup
npm run db:setup
```

### Articles not showing
```bash
# Check articles exist
psql -U postgres -d adria_style_studio
SELECT * FROM blog_articles;

# Check published articles
SELECT * FROM blog_articles WHERE published = true;
```

---

## 💡 Tips

1. **Auto-slug**: Title is auto-converted to slug as you type
2. **Publish later**: Create articles as drafts, publish when ready
3. **Search**: Use search bars to quickly find users/articles
4. **Filter**: Filter articles by status (Published/Drafts)
5. **Self-protection**: Can't delete or demote yourself
6. **Mobile**: Dashboard works on all devices
7. **Markdown**: Article content supports markdown
8. **Featured image**: Use URLs for images

---

## 🔗 Live API Examples

### Get Dashboard Stats
```
GET /api/admin/stats
Authorization: JWT token
Response: {totalUsers, totalArticles, publishedArticles, draftArticles, totalAdmins}
```

### Create New Article
```
POST /api/admin/articles
Authorization: JWT token
Body: {title, slug, content, excerpt?, featured_image?, published?}
```

### Get Published Blog
```
GET /api/blog
No authentication required
Response: Array of published articles
```

---

## 📞 Support

- **Setup help?** → Read `ADMIN_SETUP.md`
- **How to use?** → Read `ADMIN_GUIDE_COMPLETE.md`
- **Technical details?** → Read `ADMIN_BACKEND_SUMMARY.md`
- **Architecture?** → View `ARCHITECTURE_OVERVIEW.txt`

---

**Status**: ✅ Complete & Production Ready
**Version**: 1.0.0
**Last Updated**: October 15, 2025

**Questions? Check the docs! 📚**
